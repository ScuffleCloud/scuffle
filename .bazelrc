###############################################################################
## Bazel Configuration Flags
##
## `.bazelrc` is a Bazel configuration file.
## https://bazel.build/docs/best-practices#bazelrc-file
###############################################################################

###############################################################################
## Build configuration
###############################################################################

# Run the workspace status command to generate a git hash used for OCI image tagging.
build --workspace_status_command=misc/utils/workspace_status.sh

# Don't create bazel-* symlinks in the project root directory.
# Instead, set a prefix and put it in .gitignore
build --symlink_prefix=target-bazel/

# Non-empty glob test is disabled because some Bazels deps fail the test.
build --incompatible_disallow_empty_glob=false

# Disable C++ Host Toolchain Resolution
build --action_env BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# This flag improves local execution throughput by executing more actions in parallel.
build --jobs=75

# Dont stop on the first erorr
build --keep_going

###############################################################################
## Test configuration
###############################################################################

# Reduce test output to just error cases and report timeout warnings.
test --test_output=errors
test --verbose_failures
test --test_keep_going
test --build_tests_only

# Enable a combined coverage report
# Found at: $(bazel info output_path)/_coverage/_coverage_report.dat
coverage --combined_report=lcov
# This is the targets that will be compiled with coverage.
# In our case we only want to collect coverage on `crates` and `cloud` applications.
coverage --instrumentation_filter="^//(crates|cloud)"

###############################################################################
## Common configuration
###############################################################################

# Faster hashing algo
startup --digest_function=blake3

# https://github.com/bazel-contrib/bazel-lib/blob/main/docs/copy_directory.md#copy_directory
startup --host_jvm_args=-DBAZEL_TRACK_SOURCE_DIRECTORIES=1

# Enforce BzlMod usage
common --noenable_workspace
common --enable_bzlmod=true

# Use watchfs
common --watchfs

# Enable windows symlinks
startup --windows_enable_symlinks

# Enable platform configs
common --enable_platform_specific_config

# Write build outputs in a platform-specific directory;
# avoid outputs being wiped and rewritten when switching between platforms.
common --experimental_platform_in_output_dir

# Enable proto toolchain resolution.
common --incompatible_enable_proto_toolchain_resolution

# Ensure that we don't accidentally build protobuf or gRPC
common --per_file_copt=external/.*protobuf.*@--PROTOBUF_WAS_NOT_SUPPOSED_TO_BE_BUILT
common --host_per_file_copt=external/.*protobuf.*@--PROTOBUF_WAS_NOT_SUPPOSED_TO_BE_BUILT
common --per_file_copt=external/.*grpc.*@--GRPC_WAS_NOT_SUPPOSED_TO_BE_BUILT
common --host_per_file_copt=external/.*grpc.*@--GRPC_WAS_NOT_SUPPOSED_TO_BE_BUILT

# Enable misc. performance optimizations.
# https://www.buildbuddy.io/blog/debugging-slow-bazel-builds/
# https://www.buildbuddy.io/blog/how-bazel-7-0-makes-your-builds-faster/
common --nolegacy_important_outputs
common --verbose_failures
common --noexperimental_merged_skyframe_analysis_execution
common --reuse_sandbox_directories

# Enable a more detailed performance profile
common --noslim_profile
common --experimental_profile_include_target_label
common --experimental_profile_include_primary_output
common --execution_log_compact_file=.bazel_compact_execution_log

# Disable host env from polluting the build
common --incompatible_strict_action_env

# Use a hermetic JDK
common --java_runtime_version=remotejdk_21

###############################################################################
## Run configuration
###############################################################################

# Run binaries in the directory they are invoked from
run --run_under='exec $BUILD_WORKSPACE_DIRECTORY/misc/utils/run_under.sh'

common:wrapper --bes_results_url=""
common:wrapper --bes_backend=""
common:wrapper --build_event_json_file=""
common:wrapper --ui_event_filters=stdout,+error,+fatal
common:wrapper --noshow_progress
common:wrapper --noshow_loading_progress
common:wrapper --noshow_timestamps

# Disable info logging when using `bazel info`
info --ui_event_filters=-info

###############################################################################
## Rust tooling configuration
###############################################################################

# Rustfmt
common --@rules_rust//rust/settings:rustfmt.toml=//:rustfmt.toml

# Use sh_toolchain for `/usr/bin/env bash` resolution
common --@rules_rust//rust/settings:experimental_use_sh_toolchain_for_bootstrap_process_wrapper

# disable source transform
common --@rules_rust//rust/settings:incompatible_do_not_transform_sources

###############################################################################
## Remote configuration
###############################################################################

# Enable remote cache compression
common --remote_cache_compression
common --remote_download_toplevel
common --experimental_remote_merkle_tree_cache

# Disable cache on smaller files
common --experimental_remote_cache_compression_threshold=1000

###############################################################################
## Output bases configuration
###############################################################################
common --disk_cache=~/.cache/scuffle/bazel/disk
common --repository_cache=~/.cache/scuffle/bazel/repo
common --experimental_repository_cache_hardlinks

###############################################################################
## Docker configuration
###############################################################################
common --extra_toolchains=@rules_img_tool//toolchain:all

###############################################################################
## Custom user flags
##
## This should always be the last thing in the `.bazelrc` file to ensure
## consistent behavior when setting flags in that file as `.bazelrc` files are
## evaluated top to bottom.
###############################################################################
try-import %workspace%/.user.bazelrc
