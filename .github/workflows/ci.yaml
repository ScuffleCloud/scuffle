name: ci

on:
  push:
    branches:
      - automation/brawl/try/*
      - automation/brawl/merge/*

  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 13 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SHA: ${{ github.event.pull_request.head.sha || github.sha }}

defaults:
  run:
    shell: bash

jobs:
  prep:
    name: prep
    runs-on: ubuntu-24.04
    outputs:
      prep: ${{ steps.compute.outputs.prep }}
    steps:
      - uses: actions/checkout@v4

      - name: Run prep
        id: compute
        env:
          JSON_INPUT: ${{ toJson(github) }}
        run: |
          set -xeo pipefail
          echo $JSON_INPUT | python3 .github/scripts/ci-prep.py | tee -a $GITHUB_OUTPUT

  check_vendor:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).check_vendor != null }}
    uses: ./.github/workflows/ci-check-vendor.yaml
    secrets:
      build_buddy_token: ${{ secrets.BUILD_BUDDY_TOKEN }}

  test:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).test != null }}
    uses: ./.github/workflows/ci-test.yaml
    with:
      commit_sha: "${{ fromJson(needs.prep.outputs.prep).test.commit_sha }}"
      pr_number: "${{ fromJson(needs.prep.outputs.prep).test.pr_number }}"
      matrix: "${{ toJson(fromJson(needs.prep.outputs.prep).test.matrix) }}"
    secrets:
      codecov_token: "${{ secrets.CODECOV_TOKEN }}"
      build_buddy_token: "${{ secrets.BUILD_BUDDY_TOKEN }}"

  check_fmt:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).check_fmt != null }}
    uses: ./.github/workflows/ci-check-fmt.yaml
    secrets:
      build_buddy_token: ${{ secrets.BUILD_BUDDY_TOKEN }}

  grind:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).grind != null }}
    uses: ./.github/workflows/ci-grind.yaml
    with:
      matrix: "${{ toJson(fromJson(needs.prep.outputs.prep).grind.matrix) }}"
    secrets:
      codecov_token: "${{ secrets.CODECOV_TOKEN }}"
      build_buddy_token: "${{ secrets.BUILD_BUDDY_TOKEN }}"

  rustdoc:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).rustdoc != null }}
    uses: ./.github/workflows/ci-rustdoc.yaml
    permissions:
      pull-requests: write
    with:
      artifact_name: "${{ fromJson(needs.prep.outputs.prep).rustdoc.artifact_name }}"
      commit_sha: "${{ fromJson(needs.prep.outputs.prep).rustdoc.commit_sha }}"
      pr_number: "${{ fromJson(needs.prep.outputs.prep).rustdoc.pr_number }}"
      deploy_docs: "${{ fromJson(needs.prep.outputs.prep).rustdoc.deploy_docs }}"
    secrets:
      build_buddy_token: "${{ secrets.BUILD_BUDDY_TOKEN }}"
      vercel_token: "${{ secrets.VERCEL_TOKEN }}"
      vercel_project_id: "${{ secrets.VERCEL_PROJECT_ID_DOCS_SCUFFLE_RS }}"
      vercel_org_id: "${{ secrets.VERCEL_ORG_ID }}"

  dashboard:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).dashboard != null }}
    uses: ./.github/workflows/ci-dashboard.yaml
    permissions:
      pull-requests: write
    with:
      artifact_name: "${{ fromJson(needs.prep.outputs.prep).dashboard.artifact_name }}"
      commit_sha: "${{ fromJson(needs.prep.outputs.prep).dashboard.commit_sha }}"
      pr_number: "${{ fromJson(needs.prep.outputs.prep).dashboard.pr_number }}"
      deploy_docs: "${{ fromJson(needs.prep.outputs.prep).dashboard.deploy_docs }}"
    secrets:
      build_buddy_token: "${{ secrets.BUILD_BUDDY_TOKEN }}"
      vercel_token: "${{ secrets.VERCEL_TOKEN }}"
      vercel_project_id: "${{ secrets.VERCEL_PROJECT_ID_APP_SCUFFLE_CLOUD }}"
      vercel_org_id: "${{ secrets.VERCEL_ORG_ID }}"

  docs:
    needs: [prep]
    if: ${{ fromJson(needs.prep.outputs.prep).docs != null }}
    uses: ./.github/workflows/ci-docs.yaml
    permissions:
      pull-requests: write
    with:
      artifact_name: "${{ fromJson(needs.prep.outputs.prep).docs.artifact_name }}"
      commit_sha: "${{ fromJson(needs.prep.outputs.prep).docs.commit_sha }}"
      pr_number: "${{ fromJson(needs.prep.outputs.prep).docs.pr_number }}"
      deploy_docs: "${{ fromJson(needs.prep.outputs.prep).docs.deploy_docs }}"
    secrets:
      build_buddy_token: "${{ secrets.BUILD_BUDDY_TOKEN }}"
      vercel_token: "${{ secrets.VERCEL_TOKEN }}"
      vercel_project_id: "${{ secrets.VERCEL_PROJECT_ID_DOCS_SCUFFLE_CLOUD }}"
      vercel_org_id: "${{ secrets.VERCEL_ORG_ID }}"

  docs-report:
    name: docs / deployments report
    needs: [prep, rustdoc, docs, dashboard]
    runs-on: ubuntu-24.04
    if: ${{ always() && (fromJson(needs.prep.outputs.prep).rustdoc != null || fromJson(needs.prep.outputs.prep).docs != null || fromJson(needs.prep.outputs.prep).dashboard != null) }}
    permissions:
      pull-requests: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Build comment body from status artifacts
        id: build_body
        env:
          PREP_OUTPUT: ${{ needs.prep.outputs.prep }}
        run: |
          set -xeo pipefail
          PR=$(jq -r '(.rustdoc.pr_number // .docs.pr_number // .dashboard.pr_number) // empty' <<< "$PREP_OUTPUT")

          if [ -z "$PR" ]; then
            echo "No PR number found in prep output; nothing to comment on. Exiting."
            echo "PR=" >> $GITHUB_OUTPUT
            exit 0
          fi

          MARKER="<!-- scuffle-docs-deploy -->"
          OUT=body.md
          echo "$MARKER" > "$OUT"
          echo "" >> "$OUT"
          echo "|deployment|status|name|url|" >> "$OUT"
          echo "|---|---|---|---|" >> "$OUT"

          shopt -s nullglob
          for f in artifacts/*/status.json; do
            dep=$(jq -r .deployment "$f" 2>/dev/null || echo "")
            st=$(jq -r .status "$f" 2>/dev/null || echo "unknown")
            nm=$(jq -r .name "$f" 2>/dev/null || echo "")
            url=$(jq -r .url "$f" 2>/dev/null || echo "")

            if [ -n "$dep" ]; then
              echo "| $dep | $st | $nm | $url |" >> "$OUT"
            fi
          done

          if [ "$(wc -l < "$OUT")" -le 3 ]; then
            echo "| no-deploys | skipped | - | - |" >> "$OUT"
          fi

          echo "PR=$PR" >> $GITHUB_OUTPUT

      - name: Find existing marker comment
        id: find_comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ steps.build_body.outputs.PR }}
          comment-author: "github-actions[bot]"
          body-includes: "<!-- scuffle-docs-deploy -->"

      - name: Create comment (if not found)
        if: ${{ steps.find_comment.outputs.comment-id == '' && steps.build_body.outputs.PR != '' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.build_body.outputs.PR }}
          body-path: body.md

      - name: Update comment (if found)
        if: ${{ steps.find_comment.outputs.comment-id != '' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ steps.build_body.outputs.PR }}
          body-path: body.md
          edit-mode: replace

  brawl-done:
    runs-on: ubuntu-24.04
    needs: [check_vendor, test, check_fmt, grind, rustdoc]
    if: ${{ !cancelled() && github.event_name == 'push' }}
    steps:
      - name: calculate the correct exit status
        run: jq --exit-status 'all(.result == "success" or .result == "skipped")' <<< '${{ toJson(needs) }}'
