entity Unauthenticated enum ["unauthenticated"];
entity Application enum ["core"];

type GlobalContext = {
  user_session_mfa_pending?: Bool,
};

entity MfaTotpCredential {
  id: String,
  user_id: String,
  name: String,
  secret: Set<Long>,
  last_used_at: String,
};

entity MfaWebauthnCredential {
  id: String,
  user_id: String,
  name: String,
  credential_id: Set<Long>,
  counter?: Long,
  last_used_at: String,
};

entity Organization {
  id: String,
  google_customer_id?: String,
  google_hosted_domain?: String,
  name: String,
  owner_id: String,
};

entity Project {
  id: String,
  name: String,
  organization_id: String,
};

entity Policy {
  id: String,
  organization_id: String,
  project_id?: String,
  name: String,
  description?: String,
  policy: String,
};

entity Role {
  id: String,
  organization_id: String,
  name: String,
  description?: String,
  inline_policy?: String,
};

entity OrganizationMember in [Organization] {
  organization_id: String,
  user_id: String,
  invited_by_id?: String,
  inline_policy?: String,
  created_at: String,
};

entity ServiceAccount in [Organization, Project] {
  id: String,
  name: String,
  organization_id: String,
  project_id?: String,
  inline_policy?: String,
};

entity ServiceAccountToken {
  id: String,
  active: Bool,
  service_account_id: String,
  token: Set<Long>,
  inline_policy?: String,
  expires_at?: String,
};

entity OrganizationInvitation {
  id: String,
  user_id?: String,
  organization_id: String,
  organization: Organization,
  email: String,
  invited_by_id: String,
  expires_at?: String,
};

entity UserSessionRequest {
  id: String,
  device_name: String,
  device_ip: String,
  code: String,
  approved_by?: String,
  expires_at: String,
};

entity MagicLinkRequest {
  id: String,
  user_id?: String,
  email: String,
  code: Set<Long>,
  expires_at: String,
};

entity UserSessionToken {
  id: String,
  token: Set<Long>,
  expires_at: String,
};

entity UserSession {
  user_id: String,
  device_fingerprint: Set<Long>,
  device_algorithm: String,
  device_pk_data: Set<Long>,
  last_used_at: String,
  last_ip: String,
  token_id?: String,
  token?: Set<Long>,
  token_expires_at?: String,
  expires_at: String,
  mfa_pending: Bool,
};

entity User in [Organization] {
  id: String,
  preferred_name?: String,
  first_name?: String,
  last_name?: String,
  password_hash?: String,
  primary_email?: String,
  avatar_url?: String,
};

entity UserEmail {
  email: String,
  user_id: String,
  created_at: String,
};

entity NewUserEmailRequest {
  id: String,
  user_id: String,
  email: String,
  code: Set<Long>,
  expires_at: String,
};

entity UserGoogleAccount {
  sub: String,
  user_id: String,
  access_token: String,
  access_token_expires_at: String,
  created_at: String,
};

action "login_with_email_password", "login_with_magic_link", "login_with_google", "login_with_webauthn" appliesTo {
  principal: [User],
  resource: [Application],
  context: GlobalContext,
};

action "request_magic_link" appliesTo {
  principal: [Unauthenticated],
  resource: [Application],
  context: GlobalContext,
};

action "create_organization_invitation", "get_organization_invitation", "accept_organization_invitation", "decline_organization_invitation" appliesTo {
  principal: [User],
  resource: [OrganizationInvitation],
  context: GlobalContext,
};

action "list_organization_invitations_by_organization" appliesTo {
  principal: [User],
  resource: [Organization],
  context: GlobalContext,
};

action "list_organization_invitations_by_user" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};

action "create_organization", "get_organization", "update_organization", "list_organization_members", "list_projects" appliesTo {
  principal: [User],
  resource: [Organization],
  context: GlobalContext,
};

action "list_organizations_by_user" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};

action "create_project" appliesTo {
  principal: [User],
  resource: [Project],
  context: GlobalContext,
};

action "create_user_session_request", "get_user_session_request", "complete_user_session_request" appliesTo {
  principal: [Unauthenticated],
  resource: [UserSessionRequest],
  context: GlobalContext,
  };

action "approve_user_session_request" appliesTo {
  principal: [User],
  resource: [UserSessionRequest],
  context: GlobalContext,
};

action "validate_mfa_for_user_session", "refresh_user_session", "invalidate_user_session" appliesTo {
  principal: [User],
  resource: [UserSession],
  context: GlobalContext,
};

action "get_user", "update_user", "list_user_emails" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};

action "create_user_email", "delete_user_email" appliesTo {
  principal: [User],
  resource: [UserEmail],
  context: GlobalContext,
};

action "create_webauthn_credential", "list_webauthn_credentials", "create_webauthn_challenge" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};

action "complete_create_webauthn_credential", "update_webauthn_credential", "delete_webauthn_credential" appliesTo {
  principal: [User],
  resource: [MfaWebauthnCredential],
  context: GlobalContext,
};

action "create_totp_credential", "list_totp_credentials" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};

action "complete_create_totp_credential", "update_totp_credential", "delete_totp_credential" appliesTo {
  principal: [User],
  resource: [MfaTotpCredential],
  context: GlobalContext,
};

action "regenerate_recovery_codes" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};

action "delete_user" appliesTo {
  principal: [User],
  resource: [User],
  context: GlobalContext,
};
