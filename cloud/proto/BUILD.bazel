load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//cloud/proto:typescript/package_json.bzl", typescript_bin = "bin")
load("@protobuf//bazel:proto_library.bzl", "proto_library")
load("//misc/utils:proto_descriptor_set.bzl", "proto_descriptor_set")
load("//misc/utils/protobuf/ts:defs.bzl", "protobuf_ts_compile")
load("//misc/utils/rust:manifest.bzl", "cargo_toml")
load("//misc/utils/rust:package.bzl", "scuffle_build_script", "scuffle_package")
load("@aspect_bazel_lib//lib:output_files.bzl", "output_files")

npm_link_all_packages()

cargo_toml()

proto_library(
    name = "pb",
    srcs = glob(["pb/**"]),
    strip_import_prefix = "/cloud/proto/pb",
    deps = [
        "//crates/tinc:protobuf",
        "@protobuf//:descriptor_proto",
        "@protobuf//:empty_proto",
        "@protobuf//:timestamp_proto",
    ],
)

proto_descriptor_set(
    name = "tinc_fds",
    deps = [":pb"],
)

scuffle_build_script(
    name = "build_script",
    data = [":tinc_fds"],
    env = {
        "TINC_SCUFFLE_CLOUD_COMPILED_FD": "$(location :tinc_fds)",
    },
    deps = ["//crates/tinc/build"],
)

scuffle_package(
    crate_name = "scufflecloud-proto",
    deps = [
        ":build_script",
        "//crates/tinc",
    ],
)

protobuf_ts_compile(
    name = "ts_proto",
    protos = [":pb"],
)

typescript_bin.tsc(
    name = "ts_lib",
    srcs = [
        ":ts_proto",
        ":tsconfig.json",
        ":package.json",
        ":node_modules",
    ],
    args = [
        "-p", "tsconfig.json",
        "--outDir", "generated",
    ],
    chdir = package_name(),
    out_dirs = ["generated"],
    visibility = ["//visibility:public"],
)

output_files(
    name = "ts_lib_copy",
    paths = [package_name() + "/generated"],
    target = ":ts_lib",
)

npm_package(
    name = "pkg",
    srcs = ["package.json", ":ts_lib_copy"],
    visibility = ["//visibility:public"],
)
