syntax = "proto3";

package scufflecloud.core.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "tinc/annotations.proto";

import "scufflecloud/core/v1/common.proto";
import "scufflecloud/core/v1/constraints.proto";

service SessionsService {
    rpc RegisterWithEmail(RegisterWithEmailRequest) returns (google.protobuf.Empty) {
        option (tinc.method).endpoint = {
            post: "/users"
        };
    }
    rpc CompleteRegisterWithEmail(CompleteRegisterWithEmailRequest) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            post: "/users/complete"
        };
    }

    rpc LoginWithEmailOptions(LoginWithEmailOptionsRequest) returns (LoginWithEmailOptionsResponse) {
        option (tinc.method).endpoint = {
            post: "/sessions/email"
        };
    }

    rpc LoginWithEmailAndPassword(LoginWithEmailAndPasswordRequest) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            post: "/sessions/email/password"
        };
    }

    rpc LoginWithMagicLink(LoginWithMagicLinkRequest) returns (google.protobuf.Empty) {
        option (tinc.method).endpoint = {
            post: "/sessions/email/magic-link"
        };
    }
    rpc CompleteLoginWithMagicLink(CompleteLoginWithMagicLinkRequest) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            post: "/sessions/email/magic-link/complete"
        };
    }

    rpc LoginWithExternalProvider(LoginWithExternalProviderRequest) returns (LoginWithExternalProviderResponse) {
        option (tinc.method).endpoint = {
            post: "/sessions/external"
        };
    }
    rpc CompleteLoginWithExternalProvider(CompleteLoginWithExternalProviderRequest) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            post: "/sessions/external/complete"
        };
    }

    rpc LoginWithWebauthnPublicKey(LoginWithWebauthnPublicKeyRequest) returns (LoginWithWebauthnPublicKeyResponse) {
        option (tinc.method).endpoint = {
            post: "/sessions/webauthn"
        };
    }
    rpc CompleteLoginWithWebauthnPublicKey(CompleteLoginWithWebauthnPublicKeyRequest) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            post: "/sessions/webauthn/complete"
        };
    }

    rpc CreateUserSessionRequest(CreateUserSessionRequestRequest) returns (UserSessionRequest) {
        option (tinc.method).endpoint = {
            post: "/session-requests"
        };
    }
    rpc GetUserSessionRequest(GetUserSessionRequestRequest) returns (UserSessionRequest) {
        option (tinc.method).endpoint = {
            get: "/session-requests/{id}"
        };
    }
    rpc GetUserSessionRequestByCode(GetUserSessionRequestByCodeRequest) returns (UserSessionRequest) {
        option (tinc.method).endpoint = {
            get: "/session-requests/code/{code}"
        };
    }
    rpc ApproveUserSessionRequestByCode(ApproveUserSessionRequestByCodeRequest) returns (UserSessionRequest) {
        option (tinc.method).endpoint = {
            patch: "/session-requests/code/{code}/approve"
        };
    }
    rpc CompleteUserSessionRequest(CompleteUserSessionRequestRequest) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            post: "/session-requests/{id}/complete"
        };
    }

    // Refresh the current session.
    // Returns a new session token and invalidates the current one.
    rpc RefreshUserSession(google.protobuf.Empty) returns (NewUserSessionToken) {
        option (tinc.method).endpoint = {
            put: "/sessions/refresh"
        };
    }
    // Deletes the current session.
    rpc InvalidateUserSession(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (tinc.method).endpoint = {
            delete: "/sessions"
        };
    }
}

enum DeviceAlgorithm {
    // RSA with OAEP padding and SHA-256 hashing.
    RSA_OAEP_SHA256 = 0;
}

message Device {
    // The crypto algorithm (e.g. RSA) used for the public key.
    DeviceAlgorithm algorithm = 1;
    // Public key data in PKCS#8 DER format.
    bytes public_key_data = 2;
}

message NewUserSessionToken {
    string id = 1 [(string_constraint).id = true];
    bytes encrypted_token = 2;
    google.protobuf.Timestamp expires_at = 3;
    google.protobuf.Timestamp session_expires_at = 4;
}

message RegisterWithEmailRequest {
    CaptchaChallengeResponse captcha = 1;
    // The email address to register with.
    string email = 2 [(tinc.field).constraint.string.email = true];
}

message CompleteRegisterWithEmailRequest {
    // The code received via email.
    bytes code = 1;
    // The password.
    string password = 2 [(string_constraint).password = true];
    Device device = 3;
}

message LoginWithEmailOptionsRequest {
    CaptchaChallengeResponse captcha = 1;
    string email = 2 [(tinc.field).constraint.string.email = true];
}

enum LoginWithEmailOptions {
    PASSWORD = 0;
    MAGIC_LINK = 1;
}

message LoginWithEmailOptionsResponse {
    repeated LoginWithEmailOptions options = 1;
}

message LoginWithEmailAndPasswordRequest {
    CaptchaChallengeResponse captcha = 1;
    string email = 2 [(tinc.field).constraint.string.email = true];
    string password = 3 [(string_constraint).password = true];
    Device device = 4;
}

message LoginWithMagicLinkRequest {
    CaptchaChallengeResponse captcha = 1;
    string email = 2 [(tinc.field).constraint.string.email = true];
}

message CompleteLoginWithMagicLinkRequest {
    string code = 1;
    Device device = 2;
}

enum ExternalProvider {
    // Google
    GOOGLE = 0;
}

message LoginWithExternalProviderRequest {
    ExternalProvider provider = 1;
}

message LoginWithExternalProviderResponse {
    string authorization_url = 1;
}

message CompleteLoginWithExternalProviderRequest {
    // The code returned by the external provider after the user has authorized the application.
    string code = 1;
    // The state returned by the external provider.
    string state = 2;
    Device device = 3;
}

message LoginWithWebauthnPublicKeyRequest {
    bytes pk_id = 1;
}

message LoginWithWebauthnPublicKeyResponse {
    bytes challenge = 1;
}

// See https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse
message CompleteLoginWithWebauthnPublicKeyRequest {
    bytes authenticator_data = 1;
    bytes signature = 2;
    bytes user_handle = 3;
}

message CreateUserSessionRequestRequest {
    string name = 1;
}

message UserSessionRequest {
    string id = 1 [(string_constraint).id = true];
    string name = 2;
    string ip = 3;
    string approved_by = 4 [(string_constraint).id = true];
    google.protobuf.Timestamp expires_at = 5;
}

message GetUserSessionRequestRequest {
    string id = 1 [(string_constraint).id = true];
}

message GetUserSessionRequestByCodeRequest {
    string code = 1 [(tinc.field).constraint.string.len = 6];
}

message ApproveUserSessionRequestByCodeRequest {
    string code = 1 [(tinc.field).constraint.string.len = 6];
}

message CompleteUserSessionRequestRequest {
    string id = 1 [(string_constraint).id = true];
    Device device = 2;
}
