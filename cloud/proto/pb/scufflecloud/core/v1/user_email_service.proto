syntax = "proto3";

package scufflecloud.core.v1;

import "scufflecloud/core/v1/constraints.proto";
import "scufflecloud/core/v1/user.proto";
import "tinc/annotations.proto";

// A service for managing the current user's emails.
service UserEmailService {
  option (tinc.service).prefix = "/v1/user/emails";

  // List the user's emails.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  rpc List(UserEmailListRequest) returns (UserEmailListResponse) {
    option (tinc.method).endpoint = {get: "/"};
  }

  // Add a new email to the user.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  rpc Add(UserEmailAddRequest) returns (UserEmailAddResponse) {
    option (tinc.method).endpoint = {post: "/"};
  }

  // Verify a new email.
  //
  // ### Authentication
  //
  // Authentication for this method is not required, as the email verification
  // link may be clicked from a different device.
  rpc Verify(UserEmailVerifyRequest) returns (UserEmailVerifyResponse) {
    option (tinc.method).endpoint = {post: "/verify"};
  }
}

// The request for the `UserService.ListEmails` method.
message UserEmailListRequest {}

// The response for the `UserService.ListEmails` method.
message UserEmailListResponse {
  // The user's emails.
  repeated User.Email emails = 1;
}

// The request for the `UserService.AddEmail` method.
message UserEmailAddRequest {
  // The email address to add.
  // This email address cannot already be associated with the user.
  // The email address cannot be already associated with another user.
  string email = 1 [(tinc.field).constraint.string.email = true];
}

// The response for the `UserService.AddEmail` method.
message UserEmailAddResponse {
  // The added email.
  User.Email email = 1;
}

// The request for the `UserService.VerifyEmail` method.
message UserEmailVerifyRequest {
  // The id of the user.
  // Optional if the user is the current user.
  optional string user_id = 1 [(string_constraint).id = true];
  // The email address to verify.
  string email = 2 [(tinc.field).constraint.string.email = true];
  // The code sent to the email address.
  string code = 3 [(tinc.field).constraint.string.len = 6];
}

// The response for the `UserService.VerifyEmail` method.
message UserEmailVerifyResponse {
  // The verified email.
  User.Email email = 1;
}
