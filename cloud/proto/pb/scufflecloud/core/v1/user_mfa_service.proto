syntax = "proto3";

package scufflecloud.core.v1;

import "scufflecloud/core/v1/constraints.proto";
import "scufflecloud/core/v1/user.proto";
import "tinc/annotations.proto";

// A service for managing the current user's MFA options.
service UserMfaService {
  option (tinc.service).prefix = "/v1/user/mfa";

  // Begin the WebAuthn credential setup.
  //
  // Webauthn is a way to login to the application without using a password.
  // It uses a public key credential to authenticate the user.
  // This method will return a challenge to the user to complete the setup.
  // The challenge will be used to verify the user's device.
  // Once the challenge is completed the response should be submitted
  // to the `CompleteWebauthnCredentialSetup` method.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  rpc WebauthnCredentialSetup(UserMfaWebauthnCredentialSetupRequest) returns (UserMfaWebauthnCredentialSetupResponse) {
    option (tinc.method).endpoint = {post: "/webauthn"};
  }

  // Complete the WebAuthn credential setup.
  //
  // The `webauthn_credential_id` is the ID of the WebAuthn credential that
  // was returned from the `WebauthnCredentialSetup` method.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  //
  // In some cases the user may be required to provide an additional factor
  // of authentication (MFA) to perform this operation.
  rpc WebauthnCredentialFinalize(UserMfaWebauthnCredentialFinalizeRequest) returns (UserMfaWebauthnCredentialFinalizeResponse) {
    option (tinc.method).endpoint = {put: "/webauthn/{webauthn_credential_id}"};
  }

  // Update the WebAuthn credential.
  //
  // The `webauthn_credential_id` is the ID of the WebAuthn credential that
  // was returned from the `WebauthnCredentialSetup` method.
  //
  // ### Authentication
  rpc WebauthnCredentialUpdate(UserMfaWebauthnCredentialUpdateRequest) returns (UserMfaWebauthnCredentialUpdateResponse) {
    option (tinc.method).endpoint = {patch: "/webauthn/{webauthn_credential_id}"};
  }

  // Begin the TOTP credential setup.
  //
  // TOTP is a way to provide additional security when logging in to the application.
  // It uses a time-based one-time password generated by an app on the user's device.
  // You cannot login to an account using only a TOTP credential and it is intended
  // to be an additional security measure.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  rpc TotpCredentialSetup(UserMfaTotpCredentialSetupRequest) returns (UserMfaTotpCredentialSetupResponse) {
    option (tinc.method).endpoint = {post: "/totp"};
  }

  // Complete the TOTP credential setup.
  //
  // There can only be one TOTP credential active per user,
  // so if the user already has a TOTP credential active this will replace it.
  //
  // The `totp_credential_id` is the ID of the TOTP credential that
  // was returned from the `TotpCredentialSetup` method.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  //
  // In some cases the user may be required to provide an additional factor
  // of authentication (MFA) to perform this operation.
  rpc TotpCredentialFinalize(UserMfaTotpCredentialFinalizeRequest) returns (UserMfaTotpCredentialFinalizeResponse) {
    option (tinc.method).endpoint = {put: "/totp/{totp_credential_id}"};
  }

  // Update the TOTP credential.
  //
  // The `totp_credential_id` is the ID of the TOTP credential that
  // was returned from the `TotpCredentialSetup` method.
  //
  // ### Authentication
  rpc TotpCredentialUpdate(UserMfaTotpCredentialUpdateRequest) returns (UserMfaTotpCredentialUpdateResponse) {
    option (tinc.method).endpoint = {patch: "/totp/{totp_credential_id}"};
  }

  // Regenerate the recovery codes.
  // Regenerating the recovery codes will invalidate the current recovery codes.
  //
  // ### Authentication
  //
  // This method can only be called when authenticated with a user session.
  //
  // In some cases the user may be required to provide an additional factor
  // of authentication (MFA) to perform this operation.
  rpc RegenerateRecoveryCodes(UserMfaRegenerateRecoveryCodesRequest) returns (UserMfaRegenerateRecoveryCodesResponse) {
    option (tinc.method).endpoint = {post: "/recovery-codes/regenerate"};
  }
}

// The request for the `UserService.GetChallenge` method.
message UserMfaGetChallengeRequest {
  string challenge_id = 1 [(string_constraint).id = true];
}

// The request for the `UserService.ProveChallenge` method.
message UserMfaProveChallengeRequest {
  string challenge_id = 1 [(string_constraint).id = true];
}

// The request for the `UserService.BeginMfaWebauthnCredentialSetup` method.
message UserMfaWebauthnCredentialSetupRequest {}

// The response for the `UserService.BeginMfaWebauthnCredentialSetup` method.
message UserMfaWebauthnCredentialSetupResponse {
  string webauthn_credential_id = 1 [(string_constraint).id = true];
}

// The request for the `UserService.CompleteMfaWebauthnCredentialSetup` method.
message UserMfaWebauthnCredentialFinalizeRequest {
  string webauthn_credential_id = 1 [(string_constraint).id = true];
}

// The response for the `UserService.CompleteMfaWebauthnCredentialSetup` method.
message UserMfaWebauthnCredentialFinalizeResponse {
  User.Mfa.WebauthnCredential webauthn_credential = 1;
}

// The request for the `UserService.UpdateMfaWebauthnCredential` method.
message UserMfaWebauthnCredentialUpdateRequest {
  string webauthn_credential_id = 1 [(string_constraint).id = true];
  optional string name = 2;
}

// The response for the `UserService.UpdateMfaWebauthnCredential` method.
message UserMfaWebauthnCredentialUpdateResponse {
  User.Mfa.WebauthnCredential webauthn_credential = 1;
}

// The request for the `UserService.BeginMfaTotpCredentialSetup` method.
message UserMfaTotpCredentialSetupRequest {}

// The response for the `UserService.BeginTotpCredentialSetup` method.
message UserMfaTotpCredentialSetupResponse {
  string totp_credential_id = 1 [(string_constraint).id = true];
}

// The request for the `UserService.CompleteMfaTotpCredentialSetup` method.
message UserMfaTotpCredentialFinalizeRequest {}

// The response for the `UserService.CompleteMfaTotpCredentialSetup` method.
message UserMfaTotpCredentialFinalizeResponse {
  User.Mfa.TotpCredential totp_credential = 1;
}

// The request for the `UserService.UpdateMfaTotpCredential` method.
message UserMfaTotpCredentialUpdateRequest {
  string totp_credential_id = 1 [(string_constraint).id = true];
  optional string name = 2;
}

// The response for the `UserService.UpdateMfaTotpCredential` method.
message UserMfaTotpCredentialUpdateResponse {
  User.Mfa.TotpCredential totp_credential = 1;
}

// The request for the `UserService.RegenerateMfaRecoveryCodes` method.
message UserMfaRegenerateRecoveryCodesRequest {}

// The response for the `UserService.RegenerateMfaRecoveryCodes` method.
message UserMfaRegenerateRecoveryCodesResponse {
  User.Mfa.RecoveryCodes recovery_codes = 1;
}
