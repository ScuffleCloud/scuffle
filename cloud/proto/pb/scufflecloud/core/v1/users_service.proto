syntax = "proto3";

package scufflecloud.core.v1;

import "tinc/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "scufflecloud/core/v1/common.proto";
import "scufflecloud/core/v1/constraints.proto";
import "scufflecloud/core/v1/users.proto";

// Service for managing existing users.
service UsersService {
    rpc GetUser(UserByIdRequest) returns (User) {
        option (tinc.method).endpoint = {
            get: "/users/{id}"
        };
    }
    rpc UpdateUser(UpdateUserRequest) returns (User) {
        option (tinc.method).endpoint = {
            patch: "/users/{id}"
        };
    };

    rpc ListUserEmails(UserByIdRequest) returns (UserEmailsList) {
        option (tinc.method).endpoint = {
            get: "/users/{id}/emails"
        };
    }
    rpc CreateUserEmail(CreateUserEmailRequest) returns (google.protobuf.Empty) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/emails"
        };
    }
    rpc CompleteCreateUserEmail(CompleteCreateUserEmailRequest) returns (UserEmail) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/emails/complete"
        };
    }
    rpc DeleteUserEmail(DeleteUserEmailRequest) returns (UserEmail) {
        option (tinc.method).endpoint = {
            delete: "/users/{id}/emails/{email}"
        };
    }

    rpc CreateWebauthnCredential(CreateWebauthnCredentialRequest) returns (CreateWebauthnCredentialResponse) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/webauthn-credentials"
        };
    }
    rpc CompleteCreateWebauthnCredential(CompleteCreateWebauthnCredentialRequest) returns (WebauthnCredential) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/webauthn-credentials/complete"
        };
    }
    rpc ListWebauthnCredentials(UserByIdRequest) returns (WebauthnCredentialsList) {
        option (tinc.method).endpoint = {
            get: "/users/{id}/webauthn-credentials"
        };
    }
    rpc DeleteWebauthnCredential(DeleteWebauthnCredentialRequest) returns (WebauthnCredential) {
        option (tinc.method).endpoint = {
            delete: "/users/{user_id}/webauthn-credentials/{id}"
        };
    }
    rpc CreateWebauthnChallenge(UserByIdRequest) returns (WebauthnChallenge) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/webauthn-challenge"
        };
    }

    rpc CreateTotpCredential(UserByIdRequest) returns (CreateTotpCredentialResponse) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/totp-credentials"
        };
    }
    rpc CompleteCreateTotpCredential(CompleteCreateTotpCredentialRequest) returns (TotpCredential) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/totp-credentials/complete"
        };
    }
    rpc ListTotpCredentials(UserByIdRequest) returns (TotpCredentialsList) {
        option (tinc.method).endpoint = {
            get: "/users/{id}/totp-credentials"
        };
    }
    rpc DeleteTotpCredential(DeleteTotpCredentialRequest) returns (TotpCredential) {
        option (tinc.method).endpoint = {
            delete: "/users/{user_id}/totp-credentials/{id}"
        };
    }

    rpc RegenerateRecoveryCodes(UserByIdRequest) returns (RecoveryCodes) {
        option (tinc.method).endpoint = {
            post: "/users/{id}/recovery-codes"
        };
    }

    rpc DeleteUser(UserByIdRequest) returns (User) {
        option (tinc.method).endpoint = {
            delete: "/users/{id}"
        };
    }
}

message UpdateUserRequest {
    // Can only be the authenticated user's ID.
    string id = 1 [(string_constraint).id = true];
    optional UpdateUserPassword password = 2;
    optional UpdateUserNames names = 3;
    optional UpdateUserPrimaryEmail primary_email = 4;
}

message UpdateUserPassword {
    optional string current_password = 1 [(string_constraint).password = true];
    string new_password = 2 [(string_constraint).password = true];
}

message UpdateUserNames {
    string preferred_name = 1 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
    string first_name = 2 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
    string last_name = 3 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
}

message UpdateUserPrimaryEmail {
    string primary_email = 1 [(tinc.field).constraint.string.email = true];
}

message UserEmailsList {
    repeated UserEmail emails = 1;
}

message CreateUserEmailRequest {
    string id = 1 [(string_constraint).id = true];
    CaptchaChallengeResponse captcha = 2;
    string email = 3 [(tinc.field).constraint.string.email = true];
}

message CompleteCreateUserEmailRequest {
    // Can only be the authenticated user's ID.
    string id = 1 [(string_constraint).id = true];
    bytes code = 2 [(tinc.field).constraint.bytes.len = 32];
}

message DeleteUserEmailRequest {
    string id = 1 [(string_constraint).id = true];
    string email = 2 [(tinc.field).constraint.string.email = true];
}

message CreateTotpCredentialResponse {
    bytes secret_qrcode_png = 1;
    string secret_url = 2;
}

message CompleteCreateTotpCredentialRequest {
    string id = 1 [(string_constraint).id = true];
    string name = 2 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
    string code = 3 [(tinc.field).constraint.string.len = 6];
}

message WebauthnCredential {
    string id = 1 [(string_constraint).id = true];
    string user_id = 2 [(string_constraint).id = true];
    string name = 3 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
    google.protobuf.Timestamp last_used_at_utc = 4;
}

message WebauthnCredentialsList {
    repeated WebauthnCredential credentials = 1;
}

message CreateWebauthnCredentialRequest {
    string id = 1 [(string_constraint).id = true];
}

message CreateWebauthnCredentialResponse {
    // JSON encoded
    // https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create#options
    // https://docs.rs/webauthn-rs/latest/webauthn_rs/prelude/struct.PublicKeyCredentialCreationOptions.html
    string options_json = 1;
}

message CompleteCreateWebauthnCredentialRequest {
    string id = 1 [(string_constraint).id = true];
    string name = 2 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
    // JSON encoded
    // https://docs.rs/webauthn-rs/latest/webauthn_rs/prelude/struct.RegisterPublicKeyCredential.html
    // https://w3c.github.io/webauthn/#iface-pkcredential
    string response_json = 3;
}

message DeleteWebauthnCredentialRequest {
    string user_id = 1 [(string_constraint).id = true];
    string id = 2 [(string_constraint).id = true];
}

message WebauthnChallenge {
    // JSON encoded
    // https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get#options
    // https://docs.rs/webauthn-rs/latest/webauthn_rs/prelude/struct.RequestChallengeResponse.html
    string options_json = 1;
}

message TotpCredential {
    string id = 1 [(string_constraint).id = true];
    string user_id = 2 [(string_constraint).id = true];
    string name = 3 [(tinc.field).constraint.string = {
        min_len: 1,
        max_len: 255
    }];
    google.protobuf.Timestamp last_used_at_utc = 4;
}

message TotpCredentialsList {
    repeated TotpCredential credentials = 1;
}

message DeleteTotpCredentialRequest {
    string user_id = 1 [(string_constraint).id = true];
    string id = 2 [(string_constraint).id = true];
}

message RecoveryCodes {
    repeated string codes = 1 [(tinc.field).constraint.repeated.item.string.len = 8];
}
