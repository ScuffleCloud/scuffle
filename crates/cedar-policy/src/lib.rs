//! Cedar is a policy language used to express permisisons using a relationship model.
//!
//! This crate extends the [`cedar-policy`](https://docs.rs/cedar-policy) crate by adding some type safe traits and
//! a code generator crate [`scuffle-cedar-policy-codegen`](https://docs.rs/scuffle-cedar-policy-codegen) which can be used
//! to generate types from a cedar schema file.
//!
//! You can then use this in combo with cedar to have type-safe schema evaluation.
#![cfg_attr(feature = "docs", doc = "\n\nSee the [changelog][changelog] for a full release history.")]
#![cfg_attr(feature = "docs", doc = "## Feature flags")]
#![cfg_attr(feature = "docs", doc = document_features::document_features!())]
//! ## License
//!
//! This project is licensed under the MIT or Apache-2.0 license.
//! You can choose between one of them if you use this work.
//!
//! `SPDX-License-Identifier: MIT OR Apache-2.0`
#![cfg_attr(all(coverage_nightly, test), feature(coverage_attribute))]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#![deny(missing_docs)]
#![deny(unreachable_pub)]
#![deny(clippy::mod_module_files)]
#![deny(clippy::undocumented_unsafe_blocks)]
#![deny(clippy::multiple_unsafe_ops_per_block)]

mod action_request_error;
mod entities_builder;
mod entity;
mod entity_ref;
mod entity_type_name;
mod traits;
mod types;

pub use action_request_error::CedarActionRequestError;
pub use entities_builder::EntitiesBuilder;
pub use entity::{Entity, EntityBuilder};
pub use entity_ref::EntityUid;
pub use entity_type_name::EntityTypeName;
pub use traits::{CedarAction, CedarActionEntity, CedarChild, CedarEntity, CedarEnumEntity, CedarId};
pub use types::{EmptyContext, NoAttributes, NoTag};

#[doc(hidden)]
pub mod macro_exports {
    pub use {cedar_policy, cedar_policy_core, serde, serde_derive, smol_str};
}

/// Changelogs generated by [scuffle_changelog]
#[cfg(feature = "docs")]
#[scuffle_changelog::changelog]
pub mod changelog {}
