---
source: crates/tinc/build/src/codegen/cel/functions/all.rs
expression: "postcompile::compile_str!(postcompile::config!\n{\n    test: true, dependencies:\n    vec![postcompile::Dependency::version(\"tinc\", \"*\"),],\n}, quote!\n{\n    #[allow(dead_code)] fn runtime_slice(input: &[i32],) -> Result<bool,\n    ::tinc::__private::cel::CelError<'static>> { Ok(#result) }\n    #[allow(dead_code)] fn runtime_vec(input: &Vec<i32>,) -> Result<bool,\n    ::tinc::__private::cel::CelError<'static>> { Ok(#result) } #[test] fn\n    test_empty_lists()\n    {\n        assert!(runtime_slice(&[]).unwrap());\n        assert!(runtime_vec(&vec![]).unwrap());\n        assert!(runtime_slice(&[3, 4, 5]).unwrap());\n        assert!(runtime_vec(&vec![3, 4, 5]).unwrap());\n        assert!(!runtime_slice(&[3, 4, 5, 2]).unwrap());\n        assert!(!runtime_vec(&vec![3, 4, 5, 2]).unwrap());\n    }\n},)"
---
exit status: 0
--- test_stdout
running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in [ELAPSED]s
--- expanded
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2024::*;
#[allow(dead_code)]
fn runtime_slice(
    input: &[i32],
) -> Result<bool, ::tinc::__private::cel::CelError<'static>> {
    Ok({
        let mut iter = ((input).iter()).into_iter();
        loop {
            let Some(item) = iter.next() else {
                break true;
            };
            if !(::tinc::__private::cel::to_bool(
                ::tinc::__private::cel::CelValue::cel_gt(
                    ::tinc::__private::cel::CelValueConv::conv(item),
                    ::tinc::__private::cel::CelValue::Number(
                        ::tinc::__private::cel::NumberTy::I64(2i64),
                    ),
                )?,
            )) {
                break false;
            }
        }
    })
}
#[allow(dead_code)]
fn runtime_vec(
    input: &Vec<i32>,
) -> Result<bool, ::tinc::__private::cel::CelError<'static>> {
    Ok({
        let mut iter = ((input).iter()).into_iter();
        loop {
            let Some(item) = iter.next() else {
                break true;
            };
            if !(::tinc::__private::cel::to_bool(
                ::tinc::__private::cel::CelValue::cel_gt(
                    ::tinc::__private::cel::CelValueConv::conv(item),
                    ::tinc::__private::cel::CelValue::Number(
                        ::tinc::__private::cel::NumberTy::I64(2i64),
                    ),
                )?,
            )) {
                break false;
            }
        }
    })
}
