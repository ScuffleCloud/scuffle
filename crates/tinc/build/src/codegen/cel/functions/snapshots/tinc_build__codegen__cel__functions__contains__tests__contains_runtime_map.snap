---
source: crates/tinc/build/src/codegen/cel/functions/contains.rs
expression: "postcompile::compile_str!(postcompile::config!\n{\n    test: true, dependencies:\n    vec![postcompile::Dependency::version(\"tinc\", \"*\"),],\n}, quote!\n{\n    fn contains(input: &std::collections::HashMap<String, bool>) ->\n    Result<bool, ::tinc::__private::cel::CelError<'_>> { Ok(#output) } #[test]\n    fn test_contains()\n    {\n        assert_eq!(contains(&{\n            let mut map = std::collections::HashMap::new();\n            map.insert(\"value\".to_string(), true); map\n        }).unwrap(), true);\n        assert_eq!(contains(&{\n            let mut map = std::collections::HashMap::new();\n            map.insert(\"not_value\".to_string(), true); map\n        }).unwrap(), false);\n        assert_eq!(contains(&{\n            let mut map = std::collections::HashMap::new();\n            map.insert(\"xd\".to_string(), true);\n            map.insert(\"value\".to_string(), true); map\n        }).unwrap(), true);\n    }\n},)"
---
exit status: 0
--- test_stdout
running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in [ELAPSED]s
--- expanded
#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;
fn contains(
    input: &std::collections::HashMap<String, bool>,
) -> Result<bool, ::tinc::__private::cel::CelError<'_>> {
    Ok(
        ::tinc::__private::cel::map_contains(
            input,
            ::tinc::__private::cel::CelValue::String(
                ::tinc::__private::cel::CelString::Borrowed("value"),
            ),
        ),
    )
}
