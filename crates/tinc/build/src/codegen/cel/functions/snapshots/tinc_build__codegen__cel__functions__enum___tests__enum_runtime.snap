---
source: crates/tinc/build/src/codegen/cel/functions/enum_.rs
expression: "postcompile::compile_str!(postcompile::config!\n{\n    test: true, dependencies:\n    vec![postcompile::Dependency::version(\"tinc\", \"*\"),],\n}, quote::quote!\n{\n    fn to_enum(input: i32) ->\n    Result<::tinc::__private::cel::CelValue<'static>,\n    ::tinc::__private::cel::CelError<'static>> { Ok(#output) } #[test] fn\n    test_to_enum()\n    {\n        #[::tinc::reexports::linkme::distributed_slice(::tinc::__private::cel::TINC_CEL_ENUM_VTABLE)]\n        #[linkme(crate = ::tinc::reexports::linkme)] static ENUM_VTABLE:\n        ::tinc::__private::cel::EnumVtable =\n        ::tinc::__private::cel::EnumVtable\n        {\n            proto_path: \"some.Enum\", is_valid: |_| { true }, to_serde: |_|\n            {\n                ::tinc::__private::cel::CelValue::String(::tinc::__private::cel::CelString::Borrowed(\"SERDE\"))\n            }, to_proto: |_|\n            {\n                ::tinc::__private::cel::CelValue::String(::tinc::__private::cel::CelString::Borrowed(\"PROTO\"))\n            }\n        }; ::tinc::__private::cel::CelMode::Serde.set();\n        assert_eq!(to_enum(1).unwrap().to_string(), \"SERDE\");\n        ::tinc::__private::cel::CelMode::Proto.set();\n        assert_eq!(to_enum(1).unwrap().to_string(), \"PROTO\");\n    }\n},)"
---
exit status: 0
--- test_stdout
running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in [ELAPSED]s
--- expanded
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2024::*;
fn to_enum(
    input: i32,
) -> Result<
    ::tinc::__private::cel::CelValue<'static>,
    ::tinc::__private::cel::CelError<'static>,
> {
    Ok(
        ::tinc::__private::cel::CelValue::cel_to_enum(
            ::tinc::__private::cel::CelValueConv::conv(input),
            ::tinc::__private::cel::CelValue::String(
                ::tinc::__private::cel::CelString::Borrowed("some.Enum"),
            ),
        )?,
    )
}
