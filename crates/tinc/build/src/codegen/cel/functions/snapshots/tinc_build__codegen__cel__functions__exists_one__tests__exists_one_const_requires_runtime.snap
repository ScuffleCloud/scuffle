---
source: crates/tinc/build/src/codegen/cel/functions/exists_one.rs
expression: "postcompile::compile_str!(postcompile::config!\n{\n    test: true, dependencies:\n    vec![postcompile::Dependency::version(\"tinc\", \"*\"),],\n}, quote!\n{\n    fn exists_one() -> Result<bool, ::tinc::__private::cel::CelError<'static>>\n    { Ok(#output) } #[test] fn test_filter()\n    { assert_eq!(exists_one().unwrap(), false); }\n},)"
---
exit status: 0
--- test_stdout
running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in [ELAPSED]s
--- expanded
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2024::*;
fn exists_one() -> Result<bool, ::tinc::__private::cel::CelError<'static>> {
    Ok({
        let mut iter = ([
            ::tinc::__private::cel::to_bool(
                ::tinc::__private::cel::CelValue::Bool(true),
            ),
            ::tinc::__private::cel::to_bool(
                ::tinc::__private::cel::CelValue::Bool(false),
            ),
            ::tinc::__private::cel::to_bool(::tinc::__private::cel::CelValue::Bool(true)),
        ])
            .into_iter();
        let mut seen = false;
        loop {
            let Some(item) = iter.next() else {
                break seen;
            };
            if item {
                if seen {
                    break false;
                }
                seen = true;
            }
        }
    })
}
