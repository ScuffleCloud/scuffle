---
source: crates/tinc/build/src/codegen/cel/functions/filter.rs
expression: "postcompile::compile_str!(postcompile::config!\n{\n    test: true, dependencies:\n    vec![postcompile::Dependency::version(\"tinc\", \"*\"),],\n}, quote!\n{\n    fn filter(input: &std::collections::BTreeMap<String, i32>) ->\n    Result<::tinc::__private::cel::CelValue<'_>,\n    ::tinc::__private::cel::CelError<'_>> { Ok(#output) } #[test] fn\n    test_filter()\n    {\n        assert_eq!(filter(&{\n            let mut map = std::collections::BTreeMap::new();\n            map.insert(\"0\".to_string(), 0); map.insert(\"1\".to_string(), 1);\n            map.insert(\"-50\".to_string(), -50);\n            map.insert(\"50\".to_string(), 50); map\n        }).unwrap(),\n        ::tinc::__private::cel::CelValue::List([::tinc::__private::cel::CelValueConv::conv(\"1\"),\n        ::tinc::__private::cel::CelValueConv::conv(\"50\"),].into_iter().collect()));\n    }\n},)"
---
exit status: 0
--- test_stdout
running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in [ELAPSED]s
--- expanded
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2024::*;
fn filter(
    input: &std::collections::BTreeMap<String, i32>,
) -> Result<::tinc::__private::cel::CelValue<'_>, ::tinc::__private::cel::CelError<'_>> {
    Ok({
        let mut collected = Vec::new();
        let mut iter = ((input)
            .keys()
            .map(|item| ::tinc::__private::cel::CelValueConv::conv(item)))
            .into_iter();
        loop {
            let Some(item) = iter.next() else {
                break ::tinc::__private::cel::CelValue::List(collected.into());
            };
            if {
                let item = item.clone();
                ::tinc::__private::cel::to_bool(
                    ::tinc::__private::cel::CelValue::cel_gte(
                        ::tinc::__private::cel::CelValueConv::conv(
                            ::tinc::__private::cel::map_access(
                                input,
                                ::tinc::__private::cel::CelValueConv::conv(item),
                            )?,
                        ),
                        ::tinc::__private::cel::CelValue::Number(
                            ::tinc::__private::cel::NumberTy::I64(1i64),
                        ),
                    )?,
                )
            } {
                collected.push(item);
            }
        }
    })
}
