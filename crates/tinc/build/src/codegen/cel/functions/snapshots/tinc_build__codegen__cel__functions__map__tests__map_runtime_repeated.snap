---
source: crates/tinc/build/src/codegen/cel/functions/map.rs
expression: "postcompile::compile_str!(postcompile::config!\n{\n    test: true, dependencies:\n    vec![postcompile::Dependency::version(\"tinc\", \"*\"),],\n}, quote!\n{\n    fn filter(input: &Vec<i32>) ->\n    Result<::tinc::__private::cel::CelValue<'_>,\n    ::tinc::__private::cel::CelError<'_>> { Ok(#output) } #[test] fn\n    test_filter()\n    {\n        assert_eq!(filter(&vec![0, 1, -50, 50]).unwrap(),\n        ::tinc::__private::cel::CelValue::List([::tinc::__private::cel::CelValueConv::conv(0),\n        ::tinc::__private::cel::CelValueConv::conv(100),\n        ::tinc::__private::cel::CelValueConv::conv(-5000),\n        ::tinc::__private::cel::CelValueConv::conv(5000),].into_iter().collect()));\n    }\n},)"
---
exit status: 0
--- test_stdout
running 1 test
.
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in [ELAPSED]s
--- expanded
#![feature(prelude_import)]
#[macro_use]
extern crate std;
#[prelude_import]
use std::prelude::rust_2024::*;
fn filter(
    input: &Vec<i32>,
) -> Result<::tinc::__private::cel::CelValue<'_>, ::tinc::__private::cel::CelError<'_>> {
    Ok({
        let mut collected = Vec::new();
        let mut iter = ((input).iter()).into_iter();
        loop {
            let Some(item) = iter.next() else {
                break ::tinc::__private::cel::CelValue::List(collected.into());
            };
            collected
                .push(
                    ::tinc::__private::cel::CelValue::cel_mul(
                        ::tinc::__private::cel::CelValue::Number(
                            ::tinc::__private::cel::NumberTy::I64(100i64),
                        ),
                        ::tinc::__private::cel::CelValueConv::conv(item),
                    )?,
                );
        }
    })
}
