load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("@rules_cc//cc/toolchains:args_list.bzl", "cc_args_list")
load("@rules_cc//cc/toolchains:feature.bzl", "cc_feature")
load("@rules_cc//cc/toolchains:mutually_exclusive_category.bzl", "cc_mutually_exclusive_category")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")

cc_args(
    name = "use_lld",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = ["-fuse-ld=lld"],
)

cc_args(
    name = "reproducibility",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
)

cc_args(
    name = "security",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-U_FORTIFY_SOURCE",  # https://github.com/google/sanitizers/issues/247
        "-fstack-protector",
        "-fno-omit-frame-pointer",
    ],
)

cc_args(
    name = "color",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-fcolor-diagnostics",
    ],
)

cc_args(
    name = "no_absolute_paths_for_builtins",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = ["-no-canonical-prefixes"],
)

cc_args(
    name = "target",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = select({
        "//misc/platforms:linux-aarch64": ["--target=aarch64-unknown-linux-gnu"],
        "//misc/platforms:linux-x86_64": ["--target=x86_64-unknown-linux-gnu"],
        "//misc/platforms:macos-aarch64": ["--target=aarch64-apple-darwin"],
        "//misc/platforms:macos-x86_64": ["--target=x86_64-apple-darwin"],
    }),
)

cc_mutually_exclusive_category(
    name = "feat_opt_level_category",
)

cc_feature(
    name = "feat_dbg",
    args = [":dbg"],
    mutually_exclusive = [":feat_opt_level_category"],
    overrides = "@rules_cc//cc/toolchains/features:dbg",
)

cc_args(
    name = "dbg",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-g",
        "-fstandalone-debug",
    ],
)

cc_feature(
    name = "feat_fastbuild",
    args = [":fastbuild"],
    mutually_exclusive = [":feat_opt_level_category"],
    overrides = "@rules_cc//cc/toolchains/features:fastbuild",
)

cc_args(
    name = "fastbuild",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-g0",
        "-O0",
        "-DNDEBUG",
    ],
)

cc_feature(
    name = "feat_opt",
    args = [":opt"],
    mutually_exclusive = [":feat_opt_level_category"],
    overrides = "@rules_cc//cc/toolchains/features:opt",
)

cc_args(
    name = "opt",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-g0",
        "-O2",
        "-D_FORTIFY_SOURCE=1",
        "-DNDEBUG",
        "-ffunction-sections",
        "-fdata-sections",
    ],
)

cc_args(
    name = "gc_sections",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = select({
        "@platforms//os:linux": ["-Wl,--gc-sections"],
        "//conditions:default": [],
    }),
)

cc_args(
    name = "cc_coverage",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-fprofile-instr-generate",
        "-fcoverage-mapping",
    ],
)

cc_args(
    name = "link_coverage",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = ["-fprofile-instr-generate"],
)

cc_args(
    name = "link_cxx_std",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = select({
        "@platforms//os:macos": [
            "-Wl,-static",
            "-lc++",
            "-lc++abi",
            "-Wl,-dynamic",
        ],,
        "@platforms//os:linux": [
            "-stdlib=libc++",
            "-Wl,-Bstatic",
            "-lc++",
            "-lc++abi",
            "-lunwind",
            "-Wl,-Bdynamic",
        ],
    }),
)

cc_args_list(
    name = "platform_args",
    args = select({
        "//misc/platforms:linux-x86_64": [
            "@sysroots-linux-x86_64//:sysroot",
            "@clang-linux-x86_64//:system_includes",
        ],
        "//misc/platforms:linux-aarch64": [
            "@sysroots-linux-aarch64//:sysroot",
            "@clang-linux-aarch64//:system_includes",
        ],
        "//misc/platforms:macos-x86_64": [
            "@sysroots-macos-universal//:sysroot",
            "@clang-macos-x86_64//:system_includes",
        ],
        "//misc/platforms:macos-aarch64": [
            "@sysroots-macos-universal//:sysroot",
            "@clang-macos-aarch64//:system_includes",
        ],
    }),
)

cc_toolchain(
    name = "host_clang",
    args = [
        ":platform_args",
        ":use_lld",
        ":no_absolute_paths_for_builtins",
        ":target",
        ":color",
        ":security",
        ":reproducibility",
        ":gc_sections",
        ":link_cxx_std",
    ],
    compiler = "clang",
    dynamic_runtime_lib = select({
        "//misc/platforms:linux-x86_64": "@clang-linux-x86_64//:dynamic_runtime_lib",
        "//misc/platforms:linux-aarch64": "@clang-linux-aarch64//:dynamic_runtime_lib",
        "//misc/platforms:macos-x86_64": "@clang-macos-x86_64//:dynamic_runtime_lib",
        "//misc/platforms:macos-aarch64": "@clang-macos-aarch64//:dynamic_runtime_lib",
    }),
    enabled_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
    ],
    known_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        ":feat_opt",
        ":feat_dbg",
        ":feat_fastbuild",
    ],
    make_variables = [],
    static_runtime_lib = select({
        "//misc/platforms:linux-x86_64": "@clang-linux-x86_64//:static_runtime_lib",
        "//misc/platforms:linux-aarch64": "@clang-linux-aarch64//:static_runtime_lib",
        "//misc/platforms:macos-x86_64": "@clang-macos-x86_64//:static_runtime_lib",
        "//misc/platforms:macos-aarch64": "@clang-macos-aarch64//:static_runtime_lib",
    }),
    supports_param_files = True,
    tool_map = "//misc/toolchains/clang/tools:all_tools",
)

toolchain(
    name = "host_clang_toolchain",
    toolchain = ":host_clang",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
    visibility = ["//visibility:public"],
)

alias(
    name = "libclang",
    actual = select({
        "//misc/platforms:linux-x86_64": "@libclang-linux-x86_64//:lib",
        "//misc/platforms:linux-aarch64": "@libclang-linux-aarch64//:lib",
        "//misc/platforms:macos-x86_64": "@libclang-macos-x86_64//:lib",
        "//misc/platforms:macos-aarch64": "@libclang-macos-aarch64//:lib",
    }),
    tags = [
        "manual",
        "no-cache",
    ],
    visibility = ["//visibility:public"],
)
