syntax = "proto3";

package scuffle.video;

// This is an internal Ingest for the Scuffle service.
// Used for communication between scuffle microservices.
service Ingest {
  // WatchStream is a streaming RPC that allows the transcoder to watch a video
  // stream. Used by the Scuffle transcoder to digest the video stream and then
  // transcode it Pushing it to the Edge service.
  rpc WatchStream(WatchStreamRequest) returns (stream WatchStreamResponse) {}

  /// TranscoderEvent is a RPC that allows the transcoder to send events to the
  // Ingest service.
  rpc TranscoderEvent(TranscoderEventRequest)
      returns (TranscoderEventResponse) {}
}

message WatchStreamRequest {
  // The uuid of the request that was queued by the Ingest service.
  // This is not the publish uuid. This is to make sure we can easily revoke
  // queued requests.
  string request_id = 1;

  // Stream id of the stream that is being transcoded.
  string stream_id = 2;
}

message WatchStreamResponse {
  message MediaSegment {
    enum DataType {
      // The fragment is a video fragment.
      VIDEO = 0;
      // The fragment is an audio fragment.
      AUDIO = 1;
    }

    // The fragment number.
    uint64 timestamp = 1;
    // The fragment data.
    bytes data = 2;
    // Keyframe information.
    bool keyframe = 3;
    // Type of the fragment.
    DataType data_type = 4;
  }

  oneof data {
    bytes init_segment = 1;
    MediaSegment media_segment = 2;
    // If this is true, the stream has ended, if this is false, the transcoder
    // session has ended (and the stream is still going).
    bool shutting_down = 3;
  }
}

message TranscoderEventRequest {
  // The uuid of the request that was queued by the Ingest service.
  string request_id = 1;

  // Stream id of the stream that is being transcoded.
  string stream_id = 2;

  message Error {
    // The error message.
    string message = 1;
    // The error code.
    bool fatal = 2;
  }

  oneof event {
    bool started = 3;
    bool shutting_down = 4;
    Error error = 5;
  }
}

message TranscoderEventResponse {}
