syntax = "proto3";

package scuffle.video.v1;

import "scuffle/video/v1/types/playback_key_pair.proto";
import "scuffle/video/v1/types/modify_mode.proto";

// PlaybackKeyPair is a service for managing playback key pairs.
// Playback key pairs are used to authenticate playback requests.
// They are used to ensure that only authorized users can view a stream.
service PlaybackKeyPair {
  // Modifys a new playback key pair, or updates an existing one.
  rpc Modify(PlaybackKeyPairModifyRequest)
      returns (PlaybackKeyPairModifyResponse);

  // Gets playback key pairs.
  rpc Get(PlaybackKeyPairGetRequest) returns (PlaybackKeyPairGetResponse);

  // Deletes playback key pairs.
  rpc Delete(PlaybackKeyPairDeleteRequest)
      returns (PlaybackKeyPairDeleteResponse);
}

// PlaybackKeyPairModifyRequest is a request to PlaybackKeyPair.Modify
// Allows you to create a new playback key pair, or update an existing one.
message PlaybackKeyPairModifyRequest {
  // The name of the key pair
  string name = 1;

  // The public key to use
  string public_key = 2;

  // The mode is used to determine how to handle the request.
  // Either, upsert, create, or update. (default upsert)
  types.ModifyMode mode = 3;
}

// PlaybackKeyPairModifyResponse is a response to PlaybackKeyPair.Modify
message PlaybackKeyPairModifyResponse {
  // The new or updated playback key pair.
  types.PlaybackKeyPair playback_key_pair = 1;

  // Whether or not the key pair was created.
  bool created = 2;
}

// PlaybackKeyPairGetRequest is a request to PlaybackKeyPair.Get
// Allows you to get playback key pairs.
// You can filter by names (exact match).
// Allows for pagination using the previous created_at timestamp.
message PlaybackKeyPairGetRequest {
  // Names to filter by, if any. (max 100)
  // If multiple names are provided, they will be combined with OR.
  repeated string names = 1;

  // The maximum number of key pairs to return (default 100, max 1000)
  uint32 limit = 2;

  // The timestamp to start getting playback key pairs from.
  // If not provided, will start from the beginning.
  // If provided, will start from the first playback keypair after the
  // timestamp. This is a unix timestamp in nanoseconds.
  optional int64 created_at = 3;
}

// PlaybackKeyPairGetResponse is a response to PlaybackKeyPair.Get
message PlaybackKeyPairGetResponse {
  // The keypairs that were found.
  repeated types.PlaybackKeyPair playback_key_pairs = 1;
}

// Deletes playback key pairs
message PlaybackKeyPairDeleteRequest {
  // Names to delete (max 100, min 1)
  repeated string names = 1;
}

// The Names of the key pairs deleted
message PlaybackKeyPairDeleteResponse {
  // Names that were deleted
  repeated string names = 1;
}
