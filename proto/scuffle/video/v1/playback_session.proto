syntax = "proto3";

package scuffle.video.v1;

import "scuffle/video/v1/types/playback_session_ids.proto";
import "scuffle/video/v1/types/playback_session_target.proto";
import "scuffle/video/v1/types/playback_session.proto";

// PlaybackSession is a session representing a user watching a video.
// This is useful for analytics and for revoking playback sessions.
service PlaybackSession {
  // Get returns playback sessions for a target or for users, or direct ids.
  rpc Get(PlaybackSessionGetRequest) returns (PlaybackSessionGetResponse);

  // Revoke revokes playback sessions for a target or for users, or direct ids.
  rpc Revoke(PlaybackSessionRevokeRequest)
      returns (PlaybackSessionRevokeResponse);

  // Count returns the number of playback sessions for a target.
  rpc Count(PlaybackSessionCountRequest) returns (PlaybackSessionCountResponse);
}

// PlaybackSessionGetRequest is a request to PlaybackSession.Get
// Used to fecth playback sessions for a target or for users, or direct ids.
message PlaybackSessionGetRequest {
  // The ids to filter by
  optional types.PlaybackSessionIds ids = 1;

  // Optionally filter by target
  optional types.PlaybackSessionTarget target = 3;

  // Optionally filter by if the session was authorized
  optional bool authorized = 4;

  // The maximum number of sessions to return (default 100, max 1000)
  uint32 limit = 5;

  // Offset the results by the created_at field
  // You can use this to paginate results.
  optional int64 created_at = 6;
}

// PlaybackSessionGetResponse is a response to PlaybackSession.Get
message PlaybackSessionGetResponse {
  // The sessions that were found
  repeated types.PlaybackSession sessions = 1;
}

// PlaybackSessionRevokeRequest is a request to PlaybackSession.Revoke
// Used to revoke playback sessions for a target or for users, or direct ids.
// This is useful for revoking playback sessions when rooms change from public
// to private.
message PlaybackSessionRevokeRequest {
  // The target to revoke sessions for
  // If you specify direct session ids the target will be ignored
  // If you specify a user ids and a target, it will revoke all sessions for
  // that user in that target.
  // If you specify user ids without a target, it will revoke all sessions for
  // that user in all targets.
  // If you do not provide any IDs you must provide a target.
  optional types.PlaybackSessionIds ids = 1;
  // If you specify a target without any session ids it will revoke all
  // sessions for that target.
  // If you do not provide a target you must provide IDs.
  optional types.PlaybackSessionTarget target = 2;

  // Revokes sessions created before this timestamp.
  // If not provided it will revoke all sessions before now.
  optional int64 before = 3;
}

// PlaybackSessionRevokeResponse is a response to PlaybackSession.Revoke
message PlaybackSessionRevokeResponse {
  // The ids of the sessions that were revoked
  repeated string ids = 1;
}

// PlaybackSessionCountRequest is a request to PlaybackSession.Count
message PlaybackSessionCountRequest {
  // The target to filter by
  types.PlaybackSessionTarget target = 1;
}

// PlaybackSessionCountResponse is a response to PlaybackSession.Count
message PlaybackSessionCountResponse {
  // The number of sessions that were found
  // This is useful for counting total sessions.
  uint64 count = 1;

  // The number of sessions that were found after deduplication
  // This is useful for counting unique sessions
  // For example, if a user watches a video 3 times, it will only count as 1
  // deduplicated session. This is useful for analytics.
  uint64 deduplicated_count = 2;
}
