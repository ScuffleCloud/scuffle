syntax = "proto3";

package scuffle.video.v1;

import "scuffle/video/v1/types/recording.proto";

// A recording is a video that was recorded in a room.
// It can be public or private and it is managed by lifecycle policies.
// You can start recording rooms by attaching a RecordingConfig to a room. 
service Recording {
  // Get recordings.
  rpc Get(RecordingGetRequest) returns (RecordingGetResponse) {}

  // Modify recordings.
  rpc Modify(RecordingModifyRequest) returns (RecordingModifyResponse) {}

  // Delete recordings.
  rpc Delete(RecordingDeleteRequest) returns (RecordingDeleteResponse) {}
}

// RecordingGetRequest is a request to Recording.Get
// Allows you to get recordings.
// You can filter by room name or id for exact matches.
// You can also limit the number of recordings returned.
// Allows for pagination using the previous created_at timestamp.
message RecordingGetRequest {
  // The ID of the recording to get (exact match). (max 100)
  repeated string id = 1;

  // Get recording by room name. If not set, get all recordings.
  // If you provide a empty string it will return all recordings without a room
  // name.
  optional string room_name = 2;

  // Get recordings by the recording config name.
  optional string recording_config_name = 3;

  // The number of recording to return. (default 100, max 1000)
  int32 limit = 4;

  // The timestamp to start getting recording from.
  // If not provided, will start from the beginning.
  // If provided, will start from the first recording created after the
  // timestamp. If reverse is true, will start from the first recording created
  // before the timestamp. This is a unix timestamp in nanoseconds.
  optional int64 created_at = 5;

  // Whether to reverse the order of the rooms.
  bool reverse = 6;
}

// RecordingGetResponse is a response to Recording.Get
message RecordingGetResponse {
  // The recordings that were found.
  repeated types.Recording recordings = 1;
}

// RecordingModifyRequest is a request to Recording.Modify
// Allows you to modify recordings.
message RecordingModifyRequest {
  // The IDs of the recording to modify. (max 100, min 1)
  repeated string id = 1;

  // The new room name for the recording.
  // If not set, the room name will not be changed.
  optional string room_name = 2;

  // Update the recording config name.
  // If not set, the recording config name will not be changed.
  optional string recording_config_name = 3;

  // Whether the recording is public.
  // If not set, the recording will not be changed.
  // Changing this will effect the recording immediately.
  // If the recording is public, it will be available to anyone with the link.
  // If the recording is not public, you will need to issue signed tokens to
  // access it.
  optional bool is_public = 4;
}

// RecordingModifyResponse is a response to Recording.Modify
message RecordingModifyResponse {
  // The IDs of the recordings that were modified.
  repeated string ids = 1;
}

// RecordingDeleteRequest is a request to Recording.Delete
// Allows you to delete multiple recordings by specifying their IDs or by room
// name.
message RecordingDeleteRequest {
  // The ID of the recording to delete. (max 100)
  // Cannot be used with the room_name field.
  repeated string ids = 1;

  // Delete recording by room name. If not set, delete all recordings.
  // Cannot be used with the ids field.
  optional string room_name = 2;
}

// RecordingDeleteResponse is a response to Recording.Delete
message RecordingDeleteResponse {
  // The IDs of the recordings that were deleted.
  repeated string ids = 1;
}
