syntax = "proto3";

package scuffle.video.v1;

import "scuffle/video/v1/types/rendition.proto";
import "scuffle/video/v1/types/modify_mode.proto";
import "scuffle/video/v1/types/recording_lifecycle_policy.proto";
import "scuffle/video/v1/types/recording_config.proto";

// RecordingConfig is the service for managing recording configs.
// Recording configs are used to determine what renditions to record for a
// stream. They also allow you to set lifecycle policies for the recordings.
// Recording configs are applied to rooms via the room's recording_config_name.
// If a room does not have a recording_config_name, it will not be recorded.
service RecordingConfig {
  // Modify or update a recording config.
  rpc Modify(RecordingConfigModifyRequest)
      returns (RecordingConfigModifyResponse) {}

  // Get recording configs.
  rpc Get(RecordingConfigGetRequest) returns (RecordingConfigGetResponse) {}

  // Delete recording configs.
  rpc Delete(RecordingConfigDeleteRequest)
      returns (RecordingConfigDeleteResponse) {}
}

// RecordingConfigModifyRequest is the request message for
// RecordingConfig.Modify Allows you to create a new recording config, or update
// an existing one.
message RecordingConfigModifyRequest {
  // The name of the recording config to create.
  string name = 1;

  message RenditionList {
    // A list of renditions to store for this recording config. (min 1)
    repeated types.Rendition renditions = 1;
  }

  // A list of renditions to store for this recording config.
  // If not provided the existing renditions will not be updated.
  // If not provided and the recording config does not exist, the default
  // renditions will be used. [ SOURCE, HD, SD ] If provided and renditions are
  // not provided will return an error.
  optional RenditionList stored_renditions = 2;

  message LifecyclePolicyList {
    // A list of lifecycle policies to apply to this recording config. (min 1)
    repeated types.RecordingLifecyclePolicy items = 1;
  }

  // A list of lifecycle policies to apply to this recording config.
  // These policies will be applied to all recordings that are associated with
  // this recording config. If not provided the existing lifecycle policies will
  // not be updated. If not provided and the recording config does not exist,
  // the default lifecycle policies will be used. [ ] (no policies)
  optional LifecyclePolicyList lifecycle_policies = 3;

  // The mode is used to determine how to handle the request.
  // Either, upsert, create, or update. (default upsert)
  types.ModifyMode mode = 4;
}

// RecordingConfigModifyResponse is the response message for
// RecordingConfig.Modify
message RecordingConfigModifyResponse {
  // The created recording config.
  types.RecordingConfig recording_config = 1;

  // Whether the recording config was created or not.
  bool created = 2;
}

// RecordingConfigGetRequest is the request message for RecordingConfig.Get
// Allows you to get back a list of recording configs.
// You can filter by names (exact match).
// Allows for pagination using the previous created_at timestamp.
message RecordingConfigGetRequest {
  // Names to get (empty for all)
  repeated string names = 1;

  // The number of recording configs to return. (default 100, max 1000)
  int32 limit = 2;

  // The timestamp to start getting recording configs from.
  // If not provided, will start from the beginning.
  // If provided, will start from the first recording config created after the
  // timestamp. This is a unix timestamp in nanoseconds.
  optional int64 created_at = 3;
}

// RecordingConfigGetResponse is the response message for RecordingConfig.Get
message RecordingConfigGetResponse {
  // The recording configs that were found.
  repeated types.RecordingConfig recording_configs = 1;
}

// RecordingConfigDeleteRequest is the request message for
// RecordingConfig.Delete You can delete multiple recording configs at once by
// providing a list of names.
message RecordingConfigDeleteRequest {
  // Names to delete (max 100, min 1)
  repeated string names = 1;

  // Delete the recordings which are associated with the recording configs.
  // If the records are not deleted, they will be without a recording config.
  // Therefore they will not be deleted automatically.
  // (default false)
  bool delete_recordings = 2;
}

// RecordingConfigDeleteResponse is the response message for
// RecordingConfig.Delete
message RecordingConfigDeleteResponse {
  // The names of the recording configs that were deleted.
  repeated string names = 1;

  // The ids of the recordings that were either deleted or disassociated.
  repeated string recording_ids = 2;
}
