"""
The mutation object for authentication
"""
type AuthMutation {
	"""
	Login using a username and password. If via websocket this will authenticate the websocket connection.
	"""
	login(
		captchaToken: String!
		password: String!
		updateContext: Boolean
		username: String!
		validity: Int
	): Session!
	"""
	Login with a session token. If via websocket this will authenticate the websocket connection.
	"""
	loginWithToken(sessionToken: String!, updateContext: Boolean): Session!
	"""
	Logout the user with the given session token. This will invalidate the session token.
	"""
	logout(sessionToken: String): Boolean!
	"""
	If successful will return a new session for the account which just got created.
	"""
	register(
		captchaToken: String!
		email: String!
		password: String!
		updateContext: Boolean
		username: String!
		validity: Int
	): Session!
}

type ChatMessage {
	author: User
	authorId: UUID!
	channel: User!
	channelId: UUID!
	content: String!
	createdAt: DateRFC3339!
	id: UUID!
	type: MessageType!
}

type ChatMutation {
	sendMessage(channelId: UUID!, content: String!): ChatMessage!
}

scalar DateRFC3339

type DisplayNameStream {
	displayName: String!
	username: String!
}

type GlobalRole {
	allowedPermissions: Int!
	createdAt: DateRFC3339!
	deniedPermissions: Int!
	description: String!
	id: UUID!
	name: String!
	rank: Int!
}

enum MessageType {
	SYSTEM
	USER
	WELCOME
}

"""
The root mutation type which contains root level fields.
"""
type Mutation {
	auth: AuthMutation!
	chat: ChatMutation!
}

"""
The root query type which contains root level fields.
"""
type Query {
	activeStreamsByUserId(id: UUID!): Stream
	noop: Boolean!
	userById(id: UUID!): User
	userByUsername(username: String!): User
}

type Session {
	"""
	Created at
	"""
	createdAt: DateRFC3339!
	"""
	Expires at
	"""
	expiresAt: DateRFC3339!
	"""
	The session's id
	"""
	id: UUID!
	"""
	Last used at
	"""
	lastUsedAt: DateRFC3339!
	"""
	The session's token
	"""
	token: String!
	user: User!
	"""
	The user who owns this session
	"""
	userId: UUID!
}

type Stream {
	channelId: UUID!
	createdAt: DateRFC3339!
	deleted: Boolean!
	description: String!
	endedAt: DateRFC3339!
	id: UUID!
	readyState: Int!
	recorded: Boolean!
	title: String!
	transcoded: Boolean!
}

type Subscription {
	chatMessages(channelId: UUID!): ChatMessage!
	noop: Boolean!
	userDisplayName(userId: UUID!): DisplayNameStream!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID @specifiedBy(url: "http://tools.ietf.org/html/rfc4122")

type User {
	createdAt: DateRFC3339!
	displayColor: Int!
	displayName: String!
	email: String!
	emailVerified: Boolean!
	globalRoles: [GlobalRole!]!
	id: UUID!
	lastLoginAt: DateRFC3339!
	permissions: Int!
	streamKey: String!
	username: String!
}

extend schema
	@link(
		url: "https://specs.apollo.dev/federation/v2.1"
		import: [
			"@key"
			"@tag"
			"@shareable"
			"@inaccessible"
			"@override"
			"@external"
			"@provides"
			"@requires"
			"@composeDirective"
		]
	)
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
