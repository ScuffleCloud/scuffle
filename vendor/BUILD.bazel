load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_vendor", "render_config")

openssl_annotation = crate.annotation(
    build_script_data = [
        "@//misc/toolchains/openssl:include",
        "@//misc/toolchains/openssl:lib",
    ],
    build_script_env = {
        "OPENSSL_NO_VENDOR": "1",
        "OPENSSL_LIB_DIR": "$(location @//misc/toolchains/openssl:lib)",
        "OPENSSL_INCLUDE_DIR": "$(location @//misc/toolchains/openssl:include)",
        "OPENSSL_STATIC": "1",
    },
)

crates_vendor(
    name = "cargo_vendor",
    annotations = {
        "reqwest": [
            crate.annotation(
                rustc_flags = ["--cfg=reqwest_unstable"],
            ),
        ],
        "rusty_ffmpeg": [
            crate.annotation(
                build_script_data = [
                    "@//misc/toolchains/ffmpeg:lib",
                    "@//misc/toolchains/ffmpeg:include",
                    "@//misc/toolchains/clang:libclang",
                ],
                build_script_env = {
                    "CLANG_PATH": "$${pwd}/$(CC)",
                    "BINDGEN_EXTRA_CLANG_ARGS": "$(CFLAGS)",
                    "FFMPEG_DLL_PATH": "$(execpath @//misc/toolchains/ffmpeg:lib)",
                    "FFMPEG_INCLUDE_DIR": "$(execpath @//misc/toolchains/ffmpeg:include)",
                    "LIBCLANG_PATH": "$(execpath @//misc/toolchains/clang:libclang)",
                },
            ),
        ],
        "aws-lc-sys": [
            crate.annotation(
                build_script_env = {
                    # aws-lc-sys does not respect `LDFLAGS` so we need to
                    # add `-fuse-ld=lld` to instruct the compiler to use
                    # `lld` instead of `ld. We also need to add `-Wno-error`
                    # since this crate has a lot of warnings and our typical
                    # toolchain disallows them and then we silence them with `-w`.
                    # See https://github.com/aws/aws-lc-rs/issues/858
                    "CFLAGS": "$(CFLAGS) -fuse-ld=lld -Wno-error -w",
                },
            ),
        ],
        "sailfish-compiler": [
            crate.annotation(
                gen_build_script = False,
                rustc_env = {
                    "OUT_DIR": "/tmp",
                },
            ),
        ],
        "openssl-sys": [
            openssl_annotation,
        ],
    },
    cargo_bazel = "//misc/toolchains/rust:cargo-bazel",
    cargo_lockfile = "//:Cargo.lock",
    generate_build_scripts = True,
    manifests = ["//:Cargo.toml"],
    mode = "remote",
    render_config = render_config(
        default_alias_rule = "opt",
    ),
    supported_platform_triples = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "x86_64-apple-darwin",
        "aarch64-apple-darwin",
        "x86_64-pc-windows-msvc",
        "aarch64-pc-windows-msvc",
        "wasm32-unknown-unknown",
    ],
    tags = ["manual"],
    vendor_path = "cargo",
    visibility = ["//visibility:public"],
)

crates_vendor(
    name = "bindeps",
    annotations = {
        binary: [crate.annotation(gen_binaries = True)]
        for binary in [
            "cargo-deny",
            "cargo-insta",
            "just",
            "miniserve",
            "cedar-policy-cli",
            "diesel_cli",
        ]
    } | {
        "rust-analyzer": [
            crate.annotation(
                build_script_rustc_env = {
                    # This env var is used to tell RA to compile as if it
                    # were to be released to the public, hiding some errors / warnings.
                    "CFG_RELEASE": "1",
                },
                gen_binaries = True,
            ),
        ],
        "dprint": [
            crate.annotation(
                gen_binaries = True,
                gen_build_script = False,
                rustc_env = {
                    "TARGET": "",
                    "RUSTC_VERSION_TEXT": "",
                },
            ),
        ],
        "bzip2-sys": [
            crate.annotation(
                build_script_env = {
                    "CFLAGS": "$(CFLAGS) -Wno-error -w",
                },
            ),
        ],
        "openssl-sys": [
            openssl_annotation,
        ],
        "pq-src": [
            crate.annotation(
                build_script_data = [
                    "@//misc/toolchains/openssl:include",
                ],
                build_script_env = {
                    "BINDGEN_EXTRA_CLANG_ARGS": "$(CFLAGS) -I$(location @//misc/toolchains/openssl:include)",
                },
            ),
        ],
    },
    cargo_bazel = "//misc/toolchains/rust:cargo-bazel",
    cargo_config = ":rust.bindeps.cargo.toml",
    cargo_lockfile = ":Cargo.bindeps.lock",
    generate_build_scripts = True,
    mode = "remote",
    packages = {
        "cargo-deny": crate.spec(
            artifact = "bin",
            version = "0.18.4",
        ),
        "cargo-insta": crate.spec(
            artifact = "bin",
            version = "1.43.2",
        ),
        # Currently using a fork due to https://github.com/dprint/dprint/issues/1020
        "dprint": crate.spec(
            artifact = "bin",
            git = "https://github.com/TroyKomodo/dprint.git",
            rev = "7babe9ccce1edad98635256f4fe3cd71129739ec",
        ),
        "just": crate.spec(
            artifact = "bin",
            version = "1.42.4",
        ),
        "miniserve": crate.spec(
            artifact = "bin",
            version = "0.31.0",
        ),
        # Currently using a fork due to https://github.com/rust-lang/rust-analyzer/issues/20359
        "rust-analyzer": crate.spec(
            artifact = "bin",
            git = "https://github.com/scufflecloud/rust-analyzer.git",
            rev = "123f57bff97627e8a5553a5ba1d67918f877dc24",
        ),
        "cedar-policy-cli": crate.spec(
            artifact = "bin",
            version = "4.5.1",
        ),
        "diesel_cli": crate.spec(
            artifact = "bin",
            default_features = False,
            features = ["postgres-bundled"],
            version = "2.3.2",
        ),
    },
    stable_as_nightly = True,
    supported_platform_triples = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "x86_64-apple-darwin",
        "aarch64-apple-darwin",
        "x86_64-pc-windows-msvc",
        "aarch64-pc-windows-msvc",
    ],
    tags = ["manual"],
    vendor_path = "bindeps",
    visibility = ["//visibility:public"],
)
